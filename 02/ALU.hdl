// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put your code here:
	Mux16( a = x, b = false , sel = zx, out = x1);
	Not16(in = x1, out = notx);
	Mux16( a = x1, b = notx, sel = nx, out = x2);
	
	Mux16( a = y, b = false , sel = zy, out = y1);
	Not16(in = y1, out = noty);
	Mux16( a = y1, b = noty, sel = ny, out = y2);
	
	Add16( a = x2, b = y2, out = outadd);
	And16( a = x2, b = y2, out = outand);
	Mux16( a = outand, b = outadd, sel = f, out = result);		
	
	Not16( in = result, out = negresult);
	Mux16( a = result, b = negresult, sel = no, out = out,out[15]=lastbit,out[0]=first,out[1]=second,out[2]=third,out[3]=fourth,out[4]=five,out[5]=six,out[6]=seven,out[7]=eight,out[8]=nine,out[9] = ten,out[10]=eleven,out[11]=twelve,out[12]=thirteen,out[13]=fourteen,out[14]=fifteen);
	Or(a = first, b = lastbit, out = res);
	Or(a = res, b= second, out = res1);
	Or(a = res1, b= third, out = res2);
	Or(a = res2, b =fourth, out = res3);
	Or(a = res3, b = five, out = res4);
	Or(a = res4, b = six, out = res5);
	Or(a= res5, b = seven, out = res6);
	Or(a= res6, b = eight, out = res7);
	Or(a = res7, b= nine, out = res8);
	Or(a= res8 , b = ten, out= res9);
	Or(a = res9, b= eleven, out = res10);
	Or(a = res10, b= twelve, out = res11);
	Or(a = res11, b= thirteen, out = res12);
	Or(a = res12, b= fourteen, out = res13);

	Mux(a = true, b = false ,sel = res13, out = zr);

	Mux(a = false, b = true , sel = lastbit , out = ng);
}





